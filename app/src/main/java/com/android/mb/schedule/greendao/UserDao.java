package com.android.mb.schedule.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.mb.schedule.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eid = new Property(1, String.class, "eid", false, "EID");
        public final static Property Role_id = new Property(2, long.class, "role_id", false, "ROLE_ID");
        public final static Property Reg_id = new Property(3, String.class, "reg_id", false, "REG_ID");
        public final static Property Office_id = new Property(4, long.class, "office_id", false, "OFFICE_ID");
        public final static Property User_type = new Property(5, int.class, "user_type", false, "USER_TYPE");
        public final static Property Username = new Property(6, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(7, String.class, "nickname", false, "NICKNAME");
        public final static Property Avatar = new Property(8, String.class, "avatar", false, "AVATAR");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Mobile = new Property(10, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(11, String.class, "email", false, "EMAIL");
        public final static Property Loginfailure = new Property(12, long.class, "loginfailure", false, "LOGINFAILURE");
        public final static Property Logintime = new Property(13, long.class, "logintime", false, "LOGINTIME");
        public final static Property Createtime = new Property(14, long.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(15, long.class, "updatetime", false, "UPDATETIME");
        public final static Property Create_by = new Property(16, long.class, "create_by", false, "CREATE_BY");
        public final static Property Update_by = new Property(17, long.class, "update_by", false, "UPDATE_BY");
        public final static Property Token = new Property(18, String.class, "token", false, "TOKEN");
        public final static Property Status = new Property(19, String.class, "status", false, "STATUS");
        public final static Property Remarks = new Property(20, String.class, "remarks", false, "REMARKS");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EID\" TEXT," + // 1: eid
                "\"ROLE_ID\" INTEGER NOT NULL ," + // 2: role_id
                "\"REG_ID\" TEXT," + // 3: reg_id
                "\"OFFICE_ID\" INTEGER NOT NULL ," + // 4: office_id
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 5: user_type
                "\"USERNAME\" TEXT," + // 6: username
                "\"NICKNAME\" TEXT," + // 7: nickname
                "\"AVATAR\" TEXT," + // 8: avatar
                "\"PHONE\" TEXT," + // 9: phone
                "\"MOBILE\" TEXT," + // 10: mobile
                "\"EMAIL\" TEXT," + // 11: email
                "\"LOGINFAILURE\" INTEGER NOT NULL ," + // 12: loginfailure
                "\"LOGINTIME\" INTEGER NOT NULL ," + // 13: logintime
                "\"CREATETIME\" INTEGER NOT NULL ," + // 14: createtime
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 15: updatetime
                "\"CREATE_BY\" INTEGER NOT NULL ," + // 16: create_by
                "\"UPDATE_BY\" INTEGER NOT NULL ," + // 17: update_by
                "\"TOKEN\" TEXT," + // 18: token
                "\"STATUS\" TEXT," + // 19: status
                "\"REMARKS\" TEXT);"); // 20: remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(2, eid);
        }
        stmt.bindLong(3, entity.getRole_id());
 
        String reg_id = entity.getReg_id();
        if (reg_id != null) {
            stmt.bindString(4, reg_id);
        }
        stmt.bindLong(5, entity.getOffice_id());
        stmt.bindLong(6, entity.getUser_type());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(8, nickname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(11, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
        stmt.bindLong(13, entity.getLoginfailure());
        stmt.bindLong(14, entity.getLogintime());
        stmt.bindLong(15, entity.getCreatetime());
        stmt.bindLong(16, entity.getUpdatetime());
        stmt.bindLong(17, entity.getCreate_by());
        stmt.bindLong(18, entity.getUpdate_by());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(19, token);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(21, remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eid = entity.getEid();
        if (eid != null) {
            stmt.bindString(2, eid);
        }
        stmt.bindLong(3, entity.getRole_id());
 
        String reg_id = entity.getReg_id();
        if (reg_id != null) {
            stmt.bindString(4, reg_id);
        }
        stmt.bindLong(5, entity.getOffice_id());
        stmt.bindLong(6, entity.getUser_type());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(8, nickname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(11, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
        stmt.bindLong(13, entity.getLoginfailure());
        stmt.bindLong(14, entity.getLogintime());
        stmt.bindLong(15, entity.getCreatetime());
        stmt.bindLong(16, entity.getUpdatetime());
        stmt.bindLong(17, entity.getCreate_by());
        stmt.bindLong(18, entity.getUpdate_by());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(19, token);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(21, remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eid
            cursor.getLong(offset + 2), // role_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reg_id
            cursor.getLong(offset + 4), // office_id
            cursor.getInt(offset + 5), // user_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // username
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mobile
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // email
            cursor.getLong(offset + 12), // loginfailure
            cursor.getLong(offset + 13), // logintime
            cursor.getLong(offset + 14), // createtime
            cursor.getLong(offset + 15), // updatetime
            cursor.getLong(offset + 16), // create_by
            cursor.getLong(offset + 17), // update_by
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // token
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // status
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRole_id(cursor.getLong(offset + 2));
        entity.setReg_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOffice_id(cursor.getLong(offset + 4));
        entity.setUser_type(cursor.getInt(offset + 5));
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMobile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLoginfailure(cursor.getLong(offset + 12));
        entity.setLogintime(cursor.getLong(offset + 13));
        entity.setCreatetime(cursor.getLong(offset + 14));
        entity.setUpdatetime(cursor.getLong(offset + 15));
        entity.setCreate_by(cursor.getLong(offset + 16));
        entity.setUpdate_by(cursor.getLong(offset + 17));
        entity.setToken(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStatus(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRemarks(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
