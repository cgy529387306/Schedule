package com.android.mb.schedule.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.mb.schedule.db.Office;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFICE".
*/
public class OfficeDao extends AbstractDao<Office, Long> {

    public static final String TABLENAME = "OFFICE";

    /**
     * Properties of entity Office.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Old_id = new Property(1, String.class, "old_id", false, "OLD_ID");
        public final static Property Parent_id = new Property(2, long.class, "parent_id", false, "PARENT_ID");
        public final static Property Old_parent_id = new Property(3, String.class, "old_parent_id", false, "OLD_PARENT_ID");
        public final static Property Parent_ids = new Property(4, String.class, "parent_ids", false, "PARENT_IDS");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Sort = new Property(6, String.class, "sort", false, "SORT");
        public final static Property Area_id = new Property(7, long.class, "area_id", false, "AREA_ID");
        public final static Property Old_area_id = new Property(8, String.class, "old_area_id", false, "OLD_AREA_ID");
        public final static Property Code = new Property(9, String.class, "code", false, "CODE");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property Grade = new Property(11, String.class, "grade", false, "GRADE");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property Zip_code = new Property(13, String.class, "zip_code", false, "ZIP_CODE");
        public final static Property Master = new Property(14, String.class, "master", false, "MASTER");
        public final static Property Phone = new Property(15, String.class, "phone", false, "PHONE");
        public final static Property Thumbnail = new Property(16, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property City = new Property(17, String.class, "city", false, "CITY");
        public final static Property Fax = new Property(18, String.class, "fax", false, "FAX");
        public final static Property Email = new Property(19, String.class, "email", false, "EMAIL");
        public final static Property USEABLE = new Property(20, String.class, "USEABLE", false, "USEABLE");
        public final static Property PRIMARY_PERSON = new Property(21, String.class, "PRIMARY_PERSON", false, "PRIMARY__PERSON");
        public final static Property DEPUTY_PERSON = new Property(22, String.class, "DEPUTY_PERSON", false, "DEPUTY__PERSON");
        public final static Property Create_by = new Property(23, long.class, "create_by", false, "CREATE_BY");
        public final static Property Create_date = new Property(24, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Update_by = new Property(25, long.class, "update_by", false, "UPDATE_BY");
        public final static Property Update_date = new Property(26, String.class, "update_date", false, "UPDATE_DATE");
        public final static Property Remarks = new Property(27, String.class, "remarks", false, "REMARKS");
        public final static Property St_del = new Property(28, int.class, "st_del", false, "ST_DEL");
    }


    public OfficeDao(DaoConfig config) {
        super(config);
    }
    
    public OfficeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OLD_ID\" TEXT," + // 1: old_id
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 2: parent_id
                "\"OLD_PARENT_ID\" TEXT," + // 3: old_parent_id
                "\"PARENT_IDS\" TEXT," + // 4: parent_ids
                "\"NAME\" TEXT," + // 5: name
                "\"SORT\" TEXT," + // 6: sort
                "\"AREA_ID\" INTEGER NOT NULL ," + // 7: area_id
                "\"OLD_AREA_ID\" TEXT," + // 8: old_area_id
                "\"CODE\" TEXT," + // 9: code
                "\"TYPE\" TEXT," + // 10: type
                "\"GRADE\" TEXT," + // 11: grade
                "\"ADDRESS\" TEXT," + // 12: address
                "\"ZIP_CODE\" TEXT," + // 13: zip_code
                "\"MASTER\" TEXT," + // 14: master
                "\"PHONE\" TEXT," + // 15: phone
                "\"THUMBNAIL\" TEXT," + // 16: thumbnail
                "\"CITY\" TEXT," + // 17: city
                "\"FAX\" TEXT," + // 18: fax
                "\"EMAIL\" TEXT," + // 19: email
                "\"USEABLE\" TEXT," + // 20: USEABLE
                "\"PRIMARY__PERSON\" TEXT," + // 21: PRIMARY_PERSON
                "\"DEPUTY__PERSON\" TEXT," + // 22: DEPUTY_PERSON
                "\"CREATE_BY\" INTEGER NOT NULL ," + // 23: create_by
                "\"CREATE_DATE\" TEXT," + // 24: create_date
                "\"UPDATE_BY\" INTEGER NOT NULL ," + // 25: update_by
                "\"UPDATE_DATE\" TEXT," + // 26: update_date
                "\"REMARKS\" TEXT," + // 27: remarks
                "\"ST_DEL\" INTEGER NOT NULL );"); // 28: st_del
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Office entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String old_id = entity.getOld_id();
        if (old_id != null) {
            stmt.bindString(2, old_id);
        }
        stmt.bindLong(3, entity.getParent_id());
 
        String old_parent_id = entity.getOld_parent_id();
        if (old_parent_id != null) {
            stmt.bindString(4, old_parent_id);
        }
 
        String parent_ids = entity.getParent_ids();
        if (parent_ids != null) {
            stmt.bindString(5, parent_ids);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(7, sort);
        }
        stmt.bindLong(8, entity.getArea_id());
 
        String old_area_id = entity.getOld_area_id();
        if (old_area_id != null) {
            stmt.bindString(9, old_area_id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(10, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(12, grade);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String zip_code = entity.getZip_code();
        if (zip_code != null) {
            stmt.bindString(14, zip_code);
        }
 
        String master = entity.getMaster();
        if (master != null) {
            stmt.bindString(15, master);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(17, thumbnail);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(18, city);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(19, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(20, email);
        }
 
        String USEABLE = entity.getUSEABLE();
        if (USEABLE != null) {
            stmt.bindString(21, USEABLE);
        }
 
        String PRIMARY_PERSON = entity.getPRIMARY_PERSON();
        if (PRIMARY_PERSON != null) {
            stmt.bindString(22, PRIMARY_PERSON);
        }
 
        String DEPUTY_PERSON = entity.getDEPUTY_PERSON();
        if (DEPUTY_PERSON != null) {
            stmt.bindString(23, DEPUTY_PERSON);
        }
        stmt.bindLong(24, entity.getCreate_by());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(25, create_date);
        }
        stmt.bindLong(26, entity.getUpdate_by());
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(27, update_date);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(28, remarks);
        }
        stmt.bindLong(29, entity.getSt_del());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Office entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String old_id = entity.getOld_id();
        if (old_id != null) {
            stmt.bindString(2, old_id);
        }
        stmt.bindLong(3, entity.getParent_id());
 
        String old_parent_id = entity.getOld_parent_id();
        if (old_parent_id != null) {
            stmt.bindString(4, old_parent_id);
        }
 
        String parent_ids = entity.getParent_ids();
        if (parent_ids != null) {
            stmt.bindString(5, parent_ids);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(7, sort);
        }
        stmt.bindLong(8, entity.getArea_id());
 
        String old_area_id = entity.getOld_area_id();
        if (old_area_id != null) {
            stmt.bindString(9, old_area_id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(10, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(12, grade);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String zip_code = entity.getZip_code();
        if (zip_code != null) {
            stmt.bindString(14, zip_code);
        }
 
        String master = entity.getMaster();
        if (master != null) {
            stmt.bindString(15, master);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(17, thumbnail);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(18, city);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(19, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(20, email);
        }
 
        String USEABLE = entity.getUSEABLE();
        if (USEABLE != null) {
            stmt.bindString(21, USEABLE);
        }
 
        String PRIMARY_PERSON = entity.getPRIMARY_PERSON();
        if (PRIMARY_PERSON != null) {
            stmt.bindString(22, PRIMARY_PERSON);
        }
 
        String DEPUTY_PERSON = entity.getDEPUTY_PERSON();
        if (DEPUTY_PERSON != null) {
            stmt.bindString(23, DEPUTY_PERSON);
        }
        stmt.bindLong(24, entity.getCreate_by());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(25, create_date);
        }
        stmt.bindLong(26, entity.getUpdate_by());
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(27, update_date);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(28, remarks);
        }
        stmt.bindLong(29, entity.getSt_del());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Office readEntity(Cursor cursor, int offset) {
        Office entity = new Office( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // old_id
            cursor.getLong(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // old_parent_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parent_ids
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sort
            cursor.getLong(offset + 7), // area_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // old_area_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // code
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // grade
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zip_code
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // master
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // phone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // thumbnail
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // city
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fax
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // email
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // USEABLE
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // PRIMARY_PERSON
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // DEPUTY_PERSON
            cursor.getLong(offset + 23), // create_by
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // create_date
            cursor.getLong(offset + 25), // update_by
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // update_date
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // remarks
            cursor.getInt(offset + 28) // st_del
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Office entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOld_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_id(cursor.getLong(offset + 2));
        entity.setOld_parent_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParent_ids(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSort(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArea_id(cursor.getLong(offset + 7));
        entity.setOld_area_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGrade(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZip_code(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMaster(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setThumbnail(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCity(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFax(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEmail(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUSEABLE(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPRIMARY_PERSON(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDEPUTY_PERSON(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCreate_by(cursor.getLong(offset + 23));
        entity.setCreate_date(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUpdate_by(cursor.getLong(offset + 25));
        entity.setUpdate_date(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRemarks(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSt_del(cursor.getInt(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Office entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Office entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Office entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
